# Every square on the chip has a int variable that is set to the component number that uses it, unbound is empty.

# squares[x][y]
squares = [[Int(f"sq_{x}*{y}") for y in range(HEIGHT)] for x in range(WIDTH)]

# Now just enforce using squares
def claim_space(x, y, w, h, c_no):
    try:
        return And([squares[x_][y_] == c_no for (x_, y_) in product(range(x, x+w), range(y, y+h))])
    except IndexError:
        return And([])

def get_w(c_no):
    return COMPONENTS_TUPLES[c_no][0]

def get_h(c_no):
    return COMPONENTS_TUPLES[c_no][1]

def enforce_component(c_no):
    comp = components[c_no]
    return [
        Implies(And(comp[0] == x, comp[1] == y), claim_space(x, y, get_w(c_no), get_h(c_no), c_no))
    for (x,y) in product(range(WIDTH), range(HEIGHT))]

def no_overlap():
    res = []
    for c_no in range(len(COMPONENTS_TUPLES)):
        print(c_no)
        res.append(enforce_component(c_no))
    return flatten(res)

def sq_string_to_coords(s):
    tail = str(s)[3:]
    strx, stry = tail.split("*")
    x = int(strx)
    y = int(stry)
    return (x, y)

def get_assignment():
    set_option(max_args=10000)
    s = Solver()
    print("Solving")
    nov = no_overlap()
    #print(nov[0])

    flat_squares = flatten(squares)
    s.add(flatten(components_sizes) + all_components_in_bound + nov)
    s.check()
    m = s.model()
    results = [m.evaluate(var) for var in flat_squares]
    return [(sq_string_to_coords(sq), res) for (sq, res) in zip(flat_squares, results)]
    # m = s.model()
    # print(len(m))
    # for n in m:
    #     print(n)

board = [["." for y in range(HEIGHT)] for x in range(WIDTH)]
solution = get_assignment()

for ((x,y), v) in solution:
    board[y][x] = v

for row in board:
    print(' '.join(map(str, row)))

#print(capture_solve_filter())

#print(claim_space(29, 0, 5, 6, 77))

# chip_width = Int("width")
# chip_height = Int("height")

# # pc = power component
# pc_width = Int("pc_width")
# pc_height = Int("pc_height")
